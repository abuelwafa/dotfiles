snippet shebang
	#!/usr/bin/env node
snippet diseslint
	// eslint-disable-next-line
snippet log
	console.log(${0});
snippet alert
	alert('${0}');
snippet describe
	describe('${1}', function() {
		test('${0}');
	});
snippet test
	test('${0}');
snippet ''
	${1}: ${0}
snippet ''
	'${1}': '${0}'
snippet ret
	return${0};
snippet class
	class ${1} {${0}
	}
snippet constructor
	constructor(${1}) {${0}
	}
snippet im
	import ${1:*} from '${2}';${0}
# Immediately invoked function expression
snippet iife
	(() => {
		${0}
	})()
# if
snippet if
	if (${0}) {
	}
# else
snippet el
	else {${0}
	}
# else if
snippet elif
	else if (${0:true}) {
	}
# switch
snippet switch
	switch (${1:expression}) {
		case '${2:case}': {
			${3}
			break;
		}
		${0}
		default: {
			${4}
			break;
		}
	}
# case
snippet case
	case '${1:case}': {
		${0}
		break;
	}
# for (...) {...}
snippet for
	for(let i = 0, l = arr.length; i < l; i++) {
		let item = arr[i];
	}
snippet fori
	for(let i = 0; i < 10; i++) {
		${0}
	}
# while (...) {...}
snippet while
	while(false) {
		${0}
	}
# try
snippet try
	try {
		${0}
	} catch(error) {
		// handle error
	}
# do...while
snippet do
	do {
		${0}
	} while(false);
# for (property in object ) { ... }
snippet forin
	for(let prop in object) {
		object[prop]
		${0}
	}
snippet forof
	for(let item of items) {
		${0}
	}
# docblock
snippet /**
	/**
	 * description
	 *
	 */
snippet param
	@param {type} name - description
snippet return
	@returns {type} description
